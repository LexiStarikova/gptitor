stages:
  - build
  - lint
  - test
  - deploy
variables:
  DOCKER_TLS_CERTDIR: "/certs"
  APP: "my-app"
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
    - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" "$HARBOR_HOST" --password-stdin
  script:
    - docker build -t my-docker-image .
    - docker tag my-docker-image $HARBOR_HOST/$HARBOR_PROJECT/$APP:$CI_JOB_ID
    - docker tag my-docker-image $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
    - docker push $HARBOR_HOST/$HARBOR_PROJECT/$APP:$CI_JOB_ID
    - docker push $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
lint:
  stage: lint
  image: node:16  
  before_script:
    - cd React
    - npm install  
  script:
    - npm run lint
  artifacts:
    when: always
    paths:
      - React/eslint-report.html
  tags:
    - docker
  needs:
    - build
jest_tests:
  stage: test
  image: node:16-alpine
  before_script:
    - cd React 
    - npm install
  script:
    - npm run test
  artifacts:
    when: always
    paths:
      - React/coverage/  
      - React/junit.xml  
    reports:
      junit: React/junit.xml  
  tags:
    - docker
  needs:
    - build
pytest:
  stage: test
  image: python:3.9
  variables:
    PYTHONDONTWRITEBYTECODE: "1"
    COV_HTML_REPORT_PATH: "Tests/coverage/cov_html_report/"
    COV_XML_REPORT_PATH: "Tests/coverage/cov_xml_report/coverage.xml"
    COV_ANNOTATE_REPORT_PATH: "Tests/coverage/cov_annotate_report/"
  before_script:
    - cd API
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - pytest --cov=Core --cov-report=term-missing --cov-report=html:${COV_HTML_REPORT_PATH} --cov-report=xml:${COV_XML_REPORT_PATH} --cov-report=annotate:${COV_ANNOTATE_REPORT_PATH}
  artifacts:
    when: always
    paths:
      - ${COV_HTML_REPORT_PATH}
      - ${COV_XML_REPORT_PATH}
      - ${COV_ANNOTATE_REPORT_PATH}
  tags:
    - docker
  needs:
    - build
container_scanning:
  stage: test
  image:
    name: $HARBOR_HOST/docker-hub-cache/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$HARBOR_USERNAME"
    TRIVY_PASSWORD: "$HARBOR_PASSWORD"
    TRIVY_AUTH_URL: "$HARBOR_HOST"
    FULL_IMAGE_NAME: $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
    TRIVY_CACHE_DIR: "/tmp/.trivycache"
  before_script:
    - mkdir -p $CI_PROJECT_DIR/.trivycache
  script:
    - set -e
    - echo "Trivy version:"
    - trivy --version
    - echo "Downloading Trivy database:"
    - time trivy image --download-db-only --no-progress --cache-dir $TRIVY_CACHE_DIR
    - echo "Running Trivy scan with template:"
    - time trivy image --exit-code 0 --cache-dir $TRIVY_CACHE_DIR --no-progress --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    - echo "Listing contents of CI_PROJECT_DIR:"
    - ls -l "$CI_PROJECT_DIR"
    - echo "Running Trivy scan without template:"
    - time trivy image --exit-code 0 --cache-dir $TRIVY_CACHE_DIR --no-progress "$FULL_IMAGE_NAME"
    - echo "Running Trivy scan with severity filter:"
    - time trivy image --exit-code 1 --cache-dir $TRIVY_CACHE_DIR --severity CRITICAL --no-progress "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
  tags:
    - docker
  needs:
    - build
deploy:
  stage: deploy
  before_script:
    - docker info
    - echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" "$HARBOR_HOST" --password-stdin
  script:
    - docker pull $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
    - docker rm -f $APP || true
    - docker run -d --name $APP -p 80:80 $HARBOR_HOST/$HARBOR_PROJECT/$APP:latest
  tags:
    - dev-env
  needs:
    - container_scanning
